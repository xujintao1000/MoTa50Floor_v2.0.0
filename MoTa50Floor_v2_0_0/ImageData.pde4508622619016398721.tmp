
class frameRate{
  byte imgChangeRate = 0;
  boolean isOpenDoor = false;
  int doorOpenRate = 0;
  int doorIndex =0;
  int doorX=0, doorY=0;
}

class ImageData extends frameRate{
  private PImage ITEM, BACKGROUND, HINT; 
  private int [][] itemLoc;   // init with 250 image location
  
  ImageData(){
    itemLoc = new int[250][4];
    ITEM = new PImage();
    BACKGROUND = new PImage();
    HINT = new PImage();
   
    ITEM = loadImage("..\\MoTa_Img\\Mota50Floor.png");
    BACKGROUND = loadImage("..\\MoTa_Img\\Mota50Frame.png");
    HINT = loadImage("..\\MoTa_Img\\BlueImage.png");
    
    String[] totalItemLoc = loadStrings("..\\Data\\Floor\\PictureLocation.txt");     // capture the each item location on item image
    for(int i=0; i<totalItemLoc.length; i++){
      if(totalItemLoc[i].isEmpty()) continue;
      String[] currentLoc = split(totalItemLoc[i], ' ');
      for(int j=0; j<4; j++){
        itemLoc[int(currentLoc[5])][j] = int(currentLoc[j]); //  currentLoc[5] always save the fix item index 0-1 & 2-3 save the first and second x-y positions.
      }
    }
  }

  void drawGameBoard(){
    drawBackground();
    drawFloorIndexImage();
    drawBraver();
  }
//--------BackGround------------------------------------------------------------------------------------------------------------------------
  void drawBackground(){
    image(BACKGROUND,0,0);
  }
  void drawHintBackGround(){
    image(HINT,6*imgScale,48, imgScale*11, imgScale*6);
  }
  
  void drawHideBackGround(){
    fill(128, 128,128);
    rect(6*imgScale, imgScale, 11*imgScale, 11*imgScale);
  } 
//-------- Item ---------------------------------------------------------------------------------------------------------------------------
  void drawFloorIndexImage(){   // the all the index which indicate the relavent images
    for (int i=0; i<13; i++) {
      for (int j=0; j<13; j++) {
        int floorIndex = floorArray[creatureData.braver.floor][i][j];
        if (floorIndex<97) imageData.drawItemImage(floorIndex, j, i);        // draw fix item
        else  imageData.drawAnimatedImage(floorIndex, j, i);    // draw moveable icon Ex: monster
      }
    }
  }
  
  
  
  
//-------- ChangeRate ---------------------------------------------------------------------------------------------------------------------------
  
  void updateChangeRate(){
    if(frameCount % monsterImageChangeRate ==0){
      if(imgChangeRate >= 3) imgChangeRate = 0;
      else imgChangeRate++;
    }
    if(isOpenDoor){
      drawAnimatedImage(doorIndex,doorX, doorY, doorOpenRate);
      if(frameCount % doorOpenChangeRate == 0 ){
        if(doorOpenRate == 3){ doorOpenRate=0; isOpenDoor=false;}
        else doorOpenRate++;
      }
    }
  }
  
  void drawItemImage(int index, int x, int y){                 // draw fix Image onto gameBoard. the scale is limit to 11*11
    x = (x+5)*imgScale;
    y = y * imgScale;
    image(ITEM,x,y,imgScale,imgScale,itemLoc[index][0], itemLoc[index][1], itemLoc[index][2], itemLoc[index][3]);
  }
  
  void drawItemImagePixel(int index, int pX, int pY){                 // draw fix Image onto gameBoard. the scale is limit to 11*11
    image(ITEM,pX,pY,imgScale,imgScale,itemLoc[index][0], itemLoc[index][1], itemLoc[index][2], itemLoc[index][3]);
  }
  
  void drawItemImagePixel(int index, int pX, int pY, float ChangedScale){                 // draw fix Image onto gameBoard. the scale of the image can adjustable from the input changedScale
    image(ITEM,pX,pY,ChangedScale,ChangedScale,itemLoc[index][0], itemLoc[index][1], itemLoc[index][2], itemLoc[index][3]);
  }
  
  void drawAnimatedImage(int index, int x, int y){ // draw Animated Image onto gameBoard the scale is limit to 11*11
    frameRate= (frameRate%4)*32;
     x = (x+5)*imgScale;
     y= y * imgScale;
      image(ITEM,x,y,imgScale,imgScale,itemLoc[index][0]+imgChangeRate*imgScale, itemLoc[index][1], itemLoc[index][2]+imgChangeRate*imgScale, itemLoc[index][3]);
  }
  
  void drawAnimatedImage(int index, int x, int y, int rate){ // draw Animated Image onto gameBoard with special rate. EX: doorRate
    //frameRate= (frameRate%4)*32;
     x = (x+5)*imgScale;
     y= y * imgScale;
      image(ITEM,x,y,imgScale,imgScale,itemLoc[index][0]+rate*imgScale, itemLoc[index][1], itemLoc[index][2]+rate*imgScale, itemLoc[index][3]);
  }
  
  void drawAnimatedImagePixel(int index, float pX, float pY){ // draw Animated Image onto gameBoard the scale is limit to 11*11
    image(ITEM,pX,pY,imgScale,imgScale,itemLoc[index][0]+imgChangeRate*imgScale, itemLoc[index][1], itemLoc[index][2]+imgChangeRate*imgScale, itemLoc[index][3]);
  }
  
//-------- FightImage ---------------------------------------------------------------------------------------------------------------------------
  void drawFightingImg(int x, int y){
    x = (x+5)*imgScale;
    y = y*imgScale;
    image(ITEM,x,y,imgScale,imgScale,itemLoc[149][0], itemLoc[149][1], itemLoc[149][2], itemLoc[149][3]);   // index of 149 represent fighting image
  }
//-------- UI Interface ---------------------------------------------------------------------------------------------------------------------------
  void drawUIKey(int index, int pX, int pY){
    switch(index){ // input of index should be 1-3
      case 1: index = 36; break;  // Yellow key
      case 2: index = 37; break; // blue key
      case 3: index = 38; break;   // red key
    }
    image(ITEM,pX,pY,imgScale/7*5,imgScale/7*5,itemLoc[index][0], itemLoc[index][1], itemLoc[index][2], itemLoc[index][3]);
  }
  
 
  
  void drawUIBraverItem(int index, int pX, int pY){      // use for drawing the UI magic item, sward and shield
    image(ITEM,pX,pY,imgScale,imgScale,itemLoc[index][0], itemLoc[index][1], itemLoc[index][2], itemLoc[index][3]);
  }

//-------- Braver ---------------------------------------------------------------------------------------------------------------------------
  void drawBraver(){ // 1-left 2-up 3-right 4-down
    if(creatureData.braver.isMoving) drawAnimatedImagePixel(100+creatureData.braver.face-1, creatureData.braver.pX, creatureData.braver.pY);
    else drawItemImage(100+creatureData.braver.face-1, creatureData.braver.x, creatureData.braver.y);
  }
  void drawBraverPixel(){ // 1-left 2-up 3-right 4-down
    drawItemImagePixel(100+creatureData.braver.face-1, creatureData.braver.pX, creatureData.braver.pY);
  }
}
